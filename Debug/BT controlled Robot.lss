
BT controlled Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000448  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000004de  2**0
                  ALLOC
  3 .stab         0000093c  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000017d  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000070  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000085b  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001eb  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000033e  00000000  00000000  00001a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000fc  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001da  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000719  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  000027ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  8a:	0c 94 22 02 	jmp	0x444	; 0x444 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_initialize>:

unsigned char received_char;

void port_initialize()
{
	MOTOR_DDR = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17
	MOTOR_PORT = 0x00;
  96:	12 ba       	out	0x12, r1	; 18
  98:	08 95       	ret

0000009a <usart_initialize>:
}

void usart_initialize()//USART initialization//
{
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE); //enable tx and rx pin
  9a:	88 e9       	ldi	r24, 0x98	; 152
  9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ0) | (1<<UCSZ1) | (1<<URSEL); //character size 8, 1 stop bit and reg select bit = 1
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x67; //baud rate 9600
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	89 b9       	out	0x09, r24	; 9
  a6:	08 95       	ret

000000a8 <usart_send_char>:
}
void usart_send_char(unsigned char txdata)//Function to send single character serially//
{
	while(!(UCSRA&(1<<UDRE)));
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usart_send_char>
	UDR = txdata;
  ac:	8c b9       	out	0x0c, r24	; 12
  ae:	08 95       	ret

000000b0 <usart_send_string>:
}

void usart_send_string(char *str)//Function to send string serially//
{
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
  b8:	88 81       	ld	r24, Y
  ba:	88 23       	and	r24, r24
  bc:	81 f0       	breq	.+32     	; 0xde <usart_send_string+0x2e>
	UDR = txdata;
}

void usart_send_string(char *str)//Function to send string serially//
{
	unsigned char i=0;
  be:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		usart_send_char(str[i]);
  c0:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_send_char>
		i++;
  c4:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e1       	ldi	r24, 0x1F	; 31
  c8:	9e e4       	ldi	r25, 0x4E	; 78
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <usart_send_string+0x1a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <usart_send_string+0x20>
  d0:	00 00       	nop
}

void usart_send_string(char *str)//Function to send string serially//
{
	unsigned char i=0;
	while(str[i] != 0)
  d2:	fe 01       	movw	r30, r28
  d4:	e1 0f       	add	r30, r17
  d6:	f1 1d       	adc	r31, r1
  d8:	80 81       	ld	r24, Z
  da:	81 11       	cpse	r24, r1
  dc:	f1 cf       	rjmp	.-30     	; 0xc0 <usart_send_string+0x10>
	{
		usart_send_char(str[i]);
		i++;
		_delay_ms(5);
	}
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	08 95       	ret

000000e6 <usart_receive_char>:

unsigned char usart_receive_char()
{
	while( !(UCSRA & (1<<RXC)) );
  e6:	5f 9b       	sbis	0x0b, 7	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <usart_receive_char>
	return UDR;
  ea:	8c b1       	in	r24, 0x0c	; 12
}
  ec:	08 95       	ret

000000ee <BOT_MOVE_FORWARD>:

void BOT_MOVE_FORWARD(double speed)
{
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	6b 01       	movw	r12, r22
  f8:	7c 01       	movw	r14, r24
	MOTOR_PORT &= 0b00000000;
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	12 ba       	out	0x12, r1	; 18
	if (speed == 100) MOTOR_PORT |= 0b11000000; 
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	48 ec       	ldi	r20, 0xC8	; 200
 104:	52 e4       	ldi	r21, 0x42	; 66
 106:	c7 01       	movw	r24, r14
 108:	b6 01       	movw	r22, r12
 10a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__cmpsf2>
 10e:	81 11       	cpse	r24, r1
 110:	04 c0       	rjmp	.+8      	; 0x11a <BOT_MOVE_FORWARD+0x2c>
 112:	82 b3       	in	r24, 0x12	; 18
 114:	80 6c       	ori	r24, 0xC0	; 192
 116:	82 bb       	out	0x12, r24	; 18
 118:	37 c0       	rjmp	.+110    	; 0x188 <BOT_MOVE_FORWARD+0x9a>
	else if (speed == 5)
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 ea       	ldi	r20, 0xA0	; 160
 120:	50 e4       	ldi	r21, 0x40	; 64
 122:	c7 01       	movw	r24, r14
 124:	b6 01       	movw	r22, r12
 126:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__cmpsf2>
 12a:	81 11       	cpse	r24, r1
 12c:	12 c0       	rjmp	.+36     	; 0x152 <BOT_MOVE_FORWARD+0x64>
	{	
		MOTOR_PORT |= 0b11000000;
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	80 6c       	ori	r24, 0xC0	; 192
 132:	82 bb       	out	0x12, r24	; 18
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	9e e4       	ldi	r25, 0x4E	; 78
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <BOT_MOVE_FORWARD+0x4a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <BOT_MOVE_FORWARD+0x50>
 13e:	00 00       	nop
		_delay_ms(5);
		MOTOR_PORT &= 0b00000000;
 140:	82 b3       	in	r24, 0x12	; 18
 142:	12 ba       	out	0x12, r1	; 18
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <BOT_MOVE_FORWARD+0x5a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <BOT_MOVE_FORWARD+0x60>
 14e:	00 00       	nop
 150:	1b c0       	rjmp	.+54     	; 0x188 <BOT_MOVE_FORWARD+0x9a>
		_delay_ms(5);
	}
	else if (speed == 12)
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e4       	ldi	r20, 0x40	; 64
 158:	51 e4       	ldi	r21, 0x41	; 65
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__cmpsf2>
 162:	81 11       	cpse	r24, r1
 164:	11 c0       	rjmp	.+34     	; 0x188 <BOT_MOVE_FORWARD+0x9a>
	{
		MOTOR_PORT |= 0b11000000;
 166:	82 b3       	in	r24, 0x12	; 18
 168:	80 6c       	ori	r24, 0xC0	; 192
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	9b eb       	ldi	r25, 0xBB	; 187
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <BOT_MOVE_FORWARD+0x82>
 174:	00 c0       	rjmp	.+0      	; 0x176 <BOT_MOVE_FORWARD+0x88>
 176:	00 00       	nop
		_delay_ms(12);
		MOTOR_PORT &= 0b00000000;
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	12 ba       	out	0x12, r1	; 18
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <BOT_MOVE_FORWARD+0x92>
 184:	00 c0       	rjmp	.+0      	; 0x186 <BOT_MOVE_FORWARD+0x98>
 186:	00 00       	nop
		_delay_ms(5);
	}
}
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	08 95       	ret

00000192 <BOT_MOVE_BACKWARD>:
void BOT_MOVE_BACKWARD(double speed)
{
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	6b 01       	movw	r12, r22
 19c:	7c 01       	movw	r14, r24
	MOTOR_PORT &= 0b00000000;
 19e:	82 b3       	in	r24, 0x12	; 18
 1a0:	12 ba       	out	0x12, r1	; 18
	if (speed == 100) MOTOR_PORT |= 0b00110000; 
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	48 ec       	ldi	r20, 0xC8	; 200
 1a8:	52 e4       	ldi	r21, 0x42	; 66
 1aa:	c7 01       	movw	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__cmpsf2>
 1b2:	81 11       	cpse	r24, r1
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <BOT_MOVE_BACKWARD+0x2c>
 1b6:	82 b3       	in	r24, 0x12	; 18
 1b8:	80 63       	ori	r24, 0x30	; 48
 1ba:	82 bb       	out	0x12, r24	; 18
 1bc:	37 c0       	rjmp	.+110    	; 0x22c <BOT_MOVE_BACKWARD+0x9a>
	else if (speed == 5)
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 ea       	ldi	r20, 0xA0	; 160
 1c4:	50 e4       	ldi	r21, 0x40	; 64
 1c6:	c7 01       	movw	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__cmpsf2>
 1ce:	81 11       	cpse	r24, r1
 1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <BOT_MOVE_BACKWARD+0x64>
	{
		MOTOR_PORT |= 0b00110000;
 1d2:	82 b3       	in	r24, 0x12	; 18
 1d4:	80 63       	ori	r24, 0x30	; 48
 1d6:	82 bb       	out	0x12, r24	; 18
 1d8:	8f e1       	ldi	r24, 0x1F	; 31
 1da:	9e e4       	ldi	r25, 0x4E	; 78
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <BOT_MOVE_BACKWARD+0x4a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <BOT_MOVE_BACKWARD+0x50>
 1e2:	00 00       	nop
		_delay_ms(5);
		MOTOR_PORT &= 0b00000000;
 1e4:	82 b3       	in	r24, 0x12	; 18
 1e6:	12 ba       	out	0x12, r1	; 18
 1e8:	8f e1       	ldi	r24, 0x1F	; 31
 1ea:	9e e4       	ldi	r25, 0x4E	; 78
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <BOT_MOVE_BACKWARD+0x5a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <BOT_MOVE_BACKWARD+0x60>
 1f2:	00 00       	nop
 1f4:	1b c0       	rjmp	.+54     	; 0x22c <BOT_MOVE_BACKWARD+0x9a>
		_delay_ms(5);
	}
	else if (speed == 12)
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e4       	ldi	r20, 0x40	; 64
 1fc:	51 e4       	ldi	r21, 0x41	; 65
 1fe:	c7 01       	movw	r24, r14
 200:	b6 01       	movw	r22, r12
 202:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__cmpsf2>
 206:	81 11       	cpse	r24, r1
 208:	11 c0       	rjmp	.+34     	; 0x22c <BOT_MOVE_BACKWARD+0x9a>
	{
		MOTOR_PORT |= 0b00110000;
 20a:	82 b3       	in	r24, 0x12	; 18
 20c:	80 63       	ori	r24, 0x30	; 48
 20e:	82 bb       	out	0x12, r24	; 18
 210:	8f e7       	ldi	r24, 0x7F	; 127
 212:	9b eb       	ldi	r25, 0xBB	; 187
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <BOT_MOVE_BACKWARD+0x82>
 218:	00 c0       	rjmp	.+0      	; 0x21a <BOT_MOVE_BACKWARD+0x88>
 21a:	00 00       	nop
		_delay_ms(12);
		MOTOR_PORT &= 0b00000000;
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	12 ba       	out	0x12, r1	; 18
 220:	8f e1       	ldi	r24, 0x1F	; 31
 222:	9e e4       	ldi	r25, 0x4E	; 78
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <BOT_MOVE_BACKWARD+0x92>
 228:	00 c0       	rjmp	.+0      	; 0x22a <BOT_MOVE_BACKWARD+0x98>
 22a:	00 00       	nop
		_delay_ms(5);
	}
}
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	08 95       	ret

00000236 <BOT_MOVE_RIGHT>:
void BOT_MOVE_RIGHT(unsigned char speed)
{
	MOTOR_PORT &= 0b00000000;
 236:	92 b3       	in	r25, 0x12	; 18
 238:	12 ba       	out	0x12, r1	; 18
	if (speed == 100) MOTOR_PORT |= 0b10010000;
 23a:	84 36       	cpi	r24, 0x64	; 100
 23c:	21 f4       	brne	.+8      	; 0x246 <BOT_MOVE_RIGHT+0x10>
 23e:	82 b3       	in	r24, 0x12	; 18
 240:	80 69       	ori	r24, 0x90	; 144
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret
	else if (speed == 5)
 246:	85 30       	cpi	r24, 0x05	; 5
 248:	91 f4       	brne	.+36     	; 0x26e <BOT_MOVE_RIGHT+0x38>
	{
		MOTOR_PORT |= 0b10010000;
 24a:	82 b3       	in	r24, 0x12	; 18
 24c:	80 69       	ori	r24, 0x90	; 144
 24e:	82 bb       	out	0x12, r24	; 18
 250:	8f e1       	ldi	r24, 0x1F	; 31
 252:	9e e4       	ldi	r25, 0x4E	; 78
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <BOT_MOVE_RIGHT+0x1e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <BOT_MOVE_RIGHT+0x24>
 25a:	00 00       	nop
		_delay_ms(5);
		MOTOR_PORT &= 0b00000000;
 25c:	82 b3       	in	r24, 0x12	; 18
 25e:	12 ba       	out	0x12, r1	; 18
 260:	8f e1       	ldi	r24, 0x1F	; 31
 262:	9e e4       	ldi	r25, 0x4E	; 78
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <BOT_MOVE_RIGHT+0x2e>
 268:	00 c0       	rjmp	.+0      	; 0x26a <BOT_MOVE_RIGHT+0x34>
 26a:	00 00       	nop
 26c:	08 95       	ret
		_delay_ms(5);
	}
	else if (speed == 12)
 26e:	8c 30       	cpi	r24, 0x0C	; 12
 270:	89 f4       	brne	.+34     	; 0x294 <BOT_MOVE_RIGHT+0x5e>
	{
		MOTOR_PORT |= 0b10010000;
 272:	82 b3       	in	r24, 0x12	; 18
 274:	80 69       	ori	r24, 0x90	; 144
 276:	82 bb       	out	0x12, r24	; 18
 278:	8f e7       	ldi	r24, 0x7F	; 127
 27a:	9b eb       	ldi	r25, 0xBB	; 187
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <BOT_MOVE_RIGHT+0x46>
 280:	00 c0       	rjmp	.+0      	; 0x282 <BOT_MOVE_RIGHT+0x4c>
 282:	00 00       	nop
		_delay_ms(12);
		MOTOR_PORT &= 0b00000000;
 284:	82 b3       	in	r24, 0x12	; 18
 286:	12 ba       	out	0x12, r1	; 18
 288:	8f e1       	ldi	r24, 0x1F	; 31
 28a:	9e e4       	ldi	r25, 0x4E	; 78
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <BOT_MOVE_RIGHT+0x56>
 290:	00 c0       	rjmp	.+0      	; 0x292 <BOT_MOVE_RIGHT+0x5c>
 292:	00 00       	nop
 294:	08 95       	ret

00000296 <BOT_MOVE_LEFT>:
		_delay_ms(5);
	}
}
void BOT_MOVE_LEFT(unsigned char speed)
{
	MOTOR_PORT &= 0b00000000;
 296:	92 b3       	in	r25, 0x12	; 18
 298:	12 ba       	out	0x12, r1	; 18
	if (speed == 100) MOTOR_PORT |= 0b01100000;
 29a:	84 36       	cpi	r24, 0x64	; 100
 29c:	21 f4       	brne	.+8      	; 0x2a6 <BOT_MOVE_LEFT+0x10>
 29e:	82 b3       	in	r24, 0x12	; 18
 2a0:	80 66       	ori	r24, 0x60	; 96
 2a2:	82 bb       	out	0x12, r24	; 18
 2a4:	08 95       	ret
	else if (speed == 5)
 2a6:	85 30       	cpi	r24, 0x05	; 5
 2a8:	91 f4       	brne	.+36     	; 0x2ce <BOT_MOVE_LEFT+0x38>
	{
		MOTOR_PORT |= 0b01100000;
 2aa:	82 b3       	in	r24, 0x12	; 18
 2ac:	80 66       	ori	r24, 0x60	; 96
 2ae:	82 bb       	out	0x12, r24	; 18
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <BOT_MOVE_LEFT+0x1e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <BOT_MOVE_LEFT+0x24>
 2ba:	00 00       	nop
		_delay_ms(5);
		MOTOR_PORT &= 0b00000000;
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	12 ba       	out	0x12, r1	; 18
 2c0:	8f e1       	ldi	r24, 0x1F	; 31
 2c2:	9e e4       	ldi	r25, 0x4E	; 78
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <BOT_MOVE_LEFT+0x2e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <BOT_MOVE_LEFT+0x34>
 2ca:	00 00       	nop
 2cc:	08 95       	ret
		_delay_ms(5);
	}
	else if (speed == 12)
 2ce:	8c 30       	cpi	r24, 0x0C	; 12
 2d0:	89 f4       	brne	.+34     	; 0x2f4 <BOT_MOVE_LEFT+0x5e>
	{
		MOTOR_PORT |= 0b01100000;
 2d2:	82 b3       	in	r24, 0x12	; 18
 2d4:	80 66       	ori	r24, 0x60	; 96
 2d6:	82 bb       	out	0x12, r24	; 18
 2d8:	8f e7       	ldi	r24, 0x7F	; 127
 2da:	9b eb       	ldi	r25, 0xBB	; 187
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <BOT_MOVE_LEFT+0x46>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <BOT_MOVE_LEFT+0x4c>
 2e2:	00 00       	nop
		_delay_ms(12);
		MOTOR_PORT &= 0b00000000;
 2e4:	82 b3       	in	r24, 0x12	; 18
 2e6:	12 ba       	out	0x12, r1	; 18
 2e8:	8f e1       	ldi	r24, 0x1F	; 31
 2ea:	9e e4       	ldi	r25, 0x4E	; 78
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <BOT_MOVE_LEFT+0x56>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <BOT_MOVE_LEFT+0x5c>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <BOT_STOP>:
	}
}

void BOT_STOP()
{
	MOTOR_PORT &= 0x03;
 2f6:	82 b3       	in	r24, 0x12	; 18
 2f8:	83 70       	andi	r24, 0x03	; 3
 2fa:	82 bb       	out	0x12, r24	; 18
 2fc:	08 95       	ret

000002fe <main>:
}
int main(void)
{
	port_initialize();
 2fe:	0e 94 49 00 	call	0x92	; 0x92 <port_initialize>
	usart_initialize();
 302:	0e 94 4d 00 	call	0x9a	; 0x9a <usart_initialize>
 306:	8f e3       	ldi	r24, 0x3F	; 63
 308:	9c e9       	ldi	r25, 0x9C	; 156
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0xc>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x12>
 310:	00 00       	nop
	_delay_ms(10);
	//sei();
	TCCR1A = 0x00;
 312:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
 314:	1e bc       	out	0x2e, r1	; 46
	OCR1A = 255;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	9b bd       	out	0x2b, r25	; 43
 31c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 255;
 31e:	99 bd       	out	0x29, r25	; 41
 320:	88 bd       	out	0x28, r24	; 40
	usart_send_string("A");
 322:	80 e6       	ldi	r24, 0x60	; 96
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_send_string>
	while(1)
	{
		received_char = usart_receive_char();
 32a:	0e 94 73 00 	call	0xe6	; 0xe6 <usart_receive_char>
 32e:	80 93 62 00 	sts	0x0062, r24
		if (received_char == 'f')
 332:	86 36       	cpi	r24, 0x66	; 102
 334:	31 f4       	brne	.+12     	; 0x342 <main+0x44>
		{
			BOT_MOVE_FORWARD(5);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	80 ea       	ldi	r24, 0xA0	; 160
 33c:	90 e4       	ldi	r25, 0x40	; 64
 33e:	0e 94 77 00 	call	0xee	; 0xee <BOT_MOVE_FORWARD>
		}
		if (received_char == 'g')
 342:	80 91 62 00 	lds	r24, 0x0062
 346:	87 36       	cpi	r24, 0x67	; 103
 348:	39 f4       	brne	.+14     	; 0x358 <main+0x5a>
		{
			BOT_MOVE_FORWARD(12);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e4       	ldi	r24, 0x40	; 64
 350:	91 e4       	ldi	r25, 0x41	; 65
 352:	0e 94 77 00 	call	0xee	; 0xee <BOT_MOVE_FORWARD>
 356:	e9 cf       	rjmp	.-46     	; 0x32a <main+0x2c>
		}
		else if (received_char == 'h')
 358:	88 36       	cpi	r24, 0x68	; 104
 35a:	39 f4       	brne	.+14     	; 0x36a <main+0x6c>
		{
			BOT_MOVE_FORWARD(100);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	88 ec       	ldi	r24, 0xC8	; 200
 362:	92 e4       	ldi	r25, 0x42	; 66
 364:	0e 94 77 00 	call	0xee	; 0xee <BOT_MOVE_FORWARD>
 368:	e0 cf       	rjmp	.-64     	; 0x32a <main+0x2c>
		}
		
		else if (received_char == 'b')
 36a:	82 36       	cpi	r24, 0x62	; 98
 36c:	39 f4       	brne	.+14     	; 0x37c <main+0x7e>
		{
			BOT_MOVE_BACKWARD(5);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	80 ea       	ldi	r24, 0xA0	; 160
 374:	90 e4       	ldi	r25, 0x40	; 64
 376:	0e 94 c9 00 	call	0x192	; 0x192 <BOT_MOVE_BACKWARD>
 37a:	d7 cf       	rjmp	.-82     	; 0x32a <main+0x2c>
		}
		else if (received_char == 'c')
 37c:	83 36       	cpi	r24, 0x63	; 99
 37e:	39 f4       	brne	.+14     	; 0x38e <main+0x90>
		{
			BOT_MOVE_BACKWARD(12);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	80 e4       	ldi	r24, 0x40	; 64
 386:	91 e4       	ldi	r25, 0x41	; 65
 388:	0e 94 c9 00 	call	0x192	; 0x192 <BOT_MOVE_BACKWARD>
 38c:	ce cf       	rjmp	.-100    	; 0x32a <main+0x2c>
		}
		else if (received_char == 'd')
 38e:	84 36       	cpi	r24, 0x64	; 100
 390:	39 f4       	brne	.+14     	; 0x3a0 <main+0xa2>
		{
			BOT_MOVE_BACKWARD(100);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	88 ec       	ldi	r24, 0xC8	; 200
 398:	92 e4       	ldi	r25, 0x42	; 66
 39a:	0e 94 c9 00 	call	0x192	; 0x192 <BOT_MOVE_BACKWARD>
 39e:	c5 cf       	rjmp	.-118    	; 0x32a <main+0x2c>
		}
		else if (received_char == 'l')
 3a0:	8c 36       	cpi	r24, 0x6C	; 108
 3a2:	21 f4       	brne	.+8      	; 0x3ac <main+0xae>
		{
			BOT_MOVE_LEFT(5);
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	0e 94 4b 01 	call	0x296	; 0x296 <BOT_MOVE_LEFT>
 3aa:	bf cf       	rjmp	.-130    	; 0x32a <main+0x2c>
		}
		else if (received_char == 'm')
 3ac:	8d 36       	cpi	r24, 0x6D	; 109
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <main+0xba>
		{
			BOT_MOVE_LEFT(12);
 3b0:	8c e0       	ldi	r24, 0x0C	; 12
 3b2:	0e 94 4b 01 	call	0x296	; 0x296 <BOT_MOVE_LEFT>
 3b6:	b9 cf       	rjmp	.-142    	; 0x32a <main+0x2c>
		}
		else if (received_char == 'n')
 3b8:	8e 36       	cpi	r24, 0x6E	; 110
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <main+0xc6>
		{
			BOT_MOVE_LEFT(100);
 3bc:	84 e6       	ldi	r24, 0x64	; 100
 3be:	0e 94 4b 01 	call	0x296	; 0x296 <BOT_MOVE_LEFT>
 3c2:	b3 cf       	rjmp	.-154    	; 0x32a <main+0x2c>
		}
		else if (received_char == 'r')
 3c4:	82 37       	cpi	r24, 0x72	; 114
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <main+0xd2>
		{
			BOT_MOVE_RIGHT(5);
 3c8:	85 e0       	ldi	r24, 0x05	; 5
 3ca:	0e 94 1b 01 	call	0x236	; 0x236 <BOT_MOVE_RIGHT>
 3ce:	ad cf       	rjmp	.-166    	; 0x32a <main+0x2c>
		}
		else if (received_char == 's')
 3d0:	83 37       	cpi	r24, 0x73	; 115
 3d2:	21 f4       	brne	.+8      	; 0x3dc <main+0xde>
		{
			BOT_MOVE_RIGHT(12);
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	0e 94 1b 01 	call	0x236	; 0x236 <BOT_MOVE_RIGHT>
 3da:	a7 cf       	rjmp	.-178    	; 0x32a <main+0x2c>
		}
		else if (received_char == 't')
 3dc:	84 37       	cpi	r24, 0x74	; 116
 3de:	21 f4       	brne	.+8      	; 0x3e8 <main+0xea>
		{
			BOT_MOVE_RIGHT(100);
 3e0:	84 e6       	ldi	r24, 0x64	; 100
 3e2:	0e 94 1b 01 	call	0x236	; 0x236 <BOT_MOVE_RIGHT>
 3e6:	a1 cf       	rjmp	.-190    	; 0x32a <main+0x2c>
		}
		else if (received_char == 'z')
 3e8:	8a 37       	cpi	r24, 0x7A	; 122
 3ea:	09 f0       	breq	.+2      	; 0x3ee <main+0xf0>
 3ec:	9e cf       	rjmp	.-196    	; 0x32a <main+0x2c>
		{
			BOT_STOP();
 3ee:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <BOT_STOP>
 3f2:	9b cf       	rjmp	.-202    	; 0x32a <main+0x2c>

000003f4 <__cmpsf2>:
 3f4:	03 d0       	rcall	.+6      	; 0x3fc <__fp_cmp>
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <__cmpsf2+0x6>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret

000003fc <__fp_cmp>:
 3fc:	99 0f       	add	r25, r25
 3fe:	00 08       	sbc	r0, r0
 400:	55 0f       	add	r21, r21
 402:	aa 0b       	sbc	r26, r26
 404:	e0 e8       	ldi	r30, 0x80	; 128
 406:	fe ef       	ldi	r31, 0xFE	; 254
 408:	16 16       	cp	r1, r22
 40a:	17 06       	cpc	r1, r23
 40c:	e8 07       	cpc	r30, r24
 40e:	f9 07       	cpc	r31, r25
 410:	c0 f0       	brcs	.+48     	; 0x442 <__fp_cmp+0x46>
 412:	12 16       	cp	r1, r18
 414:	13 06       	cpc	r1, r19
 416:	e4 07       	cpc	r30, r20
 418:	f5 07       	cpc	r31, r21
 41a:	98 f0       	brcs	.+38     	; 0x442 <__fp_cmp+0x46>
 41c:	62 1b       	sub	r22, r18
 41e:	73 0b       	sbc	r23, r19
 420:	84 0b       	sbc	r24, r20
 422:	95 0b       	sbc	r25, r21
 424:	39 f4       	brne	.+14     	; 0x434 <__fp_cmp+0x38>
 426:	0a 26       	eor	r0, r26
 428:	61 f0       	breq	.+24     	; 0x442 <__fp_cmp+0x46>
 42a:	23 2b       	or	r18, r19
 42c:	24 2b       	or	r18, r20
 42e:	25 2b       	or	r18, r21
 430:	21 f4       	brne	.+8      	; 0x43a <__fp_cmp+0x3e>
 432:	08 95       	ret
 434:	0a 26       	eor	r0, r26
 436:	09 f4       	brne	.+2      	; 0x43a <__fp_cmp+0x3e>
 438:	a1 40       	sbci	r26, 0x01	; 1
 43a:	a6 95       	lsr	r26
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	81 1d       	adc	r24, r1
 440:	81 1d       	adc	r24, r1
 442:	08 95       	ret

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
